# Global settings - most REQUIRED
time_framework = [2020, 2025, 2030, 2035, 2040, 2045, 2050]
foresight = 5   # Has to be a multiple of the minimum separation between the years in time framework
regions = ["Kenya"]
interest_rate = 0.1
interpolation_mode = 'Active'
log_level = 'info'
excluded_commodities = ["crude_oil", "biomass", "coal", "LFO", "HFO", "gas", "CO2f", "geothermal", "hydro", "solar", "uranium", "wind", "heat"]


# Convergence parameters
equilibrium_variable = 'demand'
maximum_iterations = 100
tolerance = 0.1 
tolerance_unmet_demand = -0.1

[[outputs]]
quantity = "prices"
sink = "aggregate"
filename = "{cwd}/{default_output_dir}/MCA{Quantity}.csv"

[[outputs]]
quantity = "capacity"
sink = "aggregate"
filename = "{cwd}/{default_output_dir}/MCA{Quantity}.csv"
index = false
keep_columns = ['technology', 'dst_region', 'region', 'agent', 'sector', 'type', 'year', 'capacity']

# Carbon budget control
[carbon_budget_control]
budget = []

[global_input_files]
projections = '{path}/input/Projections.csv'
global_commodities = '{path}/input/GlobalCommodities.csv'


[sectors.residential]
type = 'default'
priority = 1
dispatch_production = 'share'

technodata = '{path}/technodata/residential/Technodata.csv'
commodities_in = '{path}/technodata/residential/CommIn.csv'
commodities_out = '{path}/technodata/residential/CommOut.csv'

[sectors.residential.subsectors.retro_and_new]
agents = '{path}/technodata/Agents.csv'
existing_capacity = '{path}/technodata/residential/ExistingCapacity.csv'
lpsolver = "scipy"  # Optional, defaults to "adhoc" 
constraints = [  # Optional, defaults to the constraints below
    "max_production",
    "max_capacity_expansion",
    "demand",
    "search_space",
]
demand_share = "new_and_retro"  # Optional, default to new_and_retro
forecast = 5  # Optional, defaults to 5 

[[sectors.residential.outputs]]
filename = '{cwd}/{default_output_dir}/{Sector}/{Quantity}/{year}{suffix}'
quantity = "capacity"
sink = 'csv'
overwrite = true
index = false

[[sectors.residential.outputs]]
filename = '{cwd}/{default_output_dir}/{Sector}/{Quantity}/{year}{suffix}'
quantity.name = "supply"
quantity.sum_over = "timeslice"
quantity.drop = ["comm_usage", "units_prices"]
sink = 'csv'
overwrite = true


[[sectors.residential.interactions]] 
net = 'new_to_retro'
interaction = 'transfer'

[sectors.power]
type = 'default'
priority = 2
dispatch_production = 'share'

technodata = '{path}/technodata/power/Technodata.csv'
commodities_in = '{path}/technodata/power/CommIn.csv'
commodities_out = '{path}/technodata/power/CommOut.csv'

[sectors.power.subsectors.retro_and_new]
agents = '{path}/technodata/Agents.csv'
existing_capacity = '{path}/technodata/power/ExistingCapacity.csv'
lpsolver = "scipy"

constraints = [  # Optional, defaults to the constraints below
    "max_production",
    "max_capacity_expansion",
    "demand",
    "search_space",
]
demand_share = "new_and_retro"  # Optional, default to new_and_retro
forecast = 5  # Optional, defaults to 5 

[[sectors.power.outputs]]
filename = '{cwd}/{default_output_dir}/{Sector}/{Quantity}/{year}{suffix}'
quantity = "capacity"
sink = 'csv'
overwrite = true
index = false

[[sectors.power.interactions]] 
net = 'new_to_retro'
interaction = 'transfer'


[sectors.oil]
type = 'default'
priority = 3
dispatch_production = 'share'

technodata = '{path}/technodata/oil/Technodata.csv'
commodities_in = '{path}/technodata/oil/CommIn.csv'
commodities_out = '{path}/technodata/oil/CommOut.csv'

[sectors.oil.subsectors.retro_and_new]
agents = '{path}/technodata/Agents.csv'
existing_capacity = '{path}/technodata/oil/ExistingCapacity.csv'
lpsolver = "scipy"


[[sectors.oil.outputs]]
filename = '{cwd}/{default_output_dir}/{Sector}/{Quantity}/{year}{suffix}'
quantity = "capacity"
sink = 'csv'
overwrite = true
index = false

[[sectors.oil.interactions]] 
net = 'new_to_retro'
interaction = 'transfer'


[sectors.residential_presets]
type = 'presets'
priority = 0
consumption_path= "{path}/technodata/preset/*Consumption.csv"


[timeslices]
all-year.all-week.night = 1460
all-year.all-week.morning = 1460
all-year.all-week.afternoon = 1460
all-year.all-week.early-peak = 1460
all-year.all-week.late-peak = 1460
all-year.all-week.evening = 1460
level_names = ["month", "day", "hour"]
